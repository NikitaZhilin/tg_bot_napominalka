import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ConversationHandler, ContextTypes
)
from database import (
    create_list, add_item_to_list, get_lists, get_items_from_list,
    delete_list, delete_item_from_list,
    create_reminder, get_reminders, delete_reminder, get_users, get_admins
)
from scheduler import schedule_reminder
from datetime import datetime

LIST_NAME, LIST_ITEM, CHOOSE_LIST, EDIT_LIST = range(4)
REMINDER_TEXT, REMINDER_TIME = range(2)

ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")

def is_admin(user_id):
    return str(user_id) in ADMIN_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üõí –°–ø–∏—Å–∫–∏", callback_data="lists")],
        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")],
        [InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω–∫–∞", callback_data="admin")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# ==== –°–ø–∏—Å–∫–∏ ====

async def show_lists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lists = get_lists(user_id)
    keyboard = [
        [InlineKeyboardButton(lst["name"], callback_data=f"list_{lst['id']}")]
        for lst in lists
    ]
    keyboard.append([InlineKeyboardButton("üì¶ –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="new_list")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await query.edit_message_text("–í–∞—à–∏ —Å–ø–∏—Å–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

async def new_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:")
    return LIST_NAME

async def save_list_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    user_id = update.message.from_user.id
    list_id = create_list(user_id, name)
    context.user_data["current_list_id"] = list_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞:")
    return LIST_ITEM

async def add_list_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    item = update.message.text
    list_id = context.user_data.get("current_list_id")
    add_item_to_list(list_id, item)
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    return LIST_ITEM

async def done_adding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    return ConversationHandler.END

async def open_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    list_id = int(query.data.split("_")[1])
    context.user_data["edit_list_id"] = list_id
    items = get_items_from_list(list_id)
    keyboard = [[InlineKeyboardButton(f"‚ùå {item['item']}", callback_data=f"delitem_{item['id']}")] for item in items]
    keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫", callback_data=f"dellist_{list_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="lists")])
    await query.edit_message_text("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    item_id = int(query.data.split("_")[1])
    delete_item_from_list(item_id)
    await open_list(update, context)

async def delete_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    list_id = int(query.data.split("_")[1])
    delete_list(list_id)
    await show_lists(update, context)

# ==== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ====

async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    reminders = get_reminders(user_id)
    keyboard = [[InlineKeyboardButton(f"‚ùå {rem['text']}", callback_data=f"delrem_{rem['id']}")] for rem in reminders]
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="new_reminder")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await query.edit_message_text("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def new_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    return REMINDER_TEXT

async def save_reminder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reminder_text"] = update.message.text
    await update.message.reply_text("–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
    return REMINDER_TIME

async def save_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        remind_at = datetime.strptime(update.message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return REMINDER_TIME
    text = context.user_data["reminder_text"]
    user_id = update.message.from_user.id
    reminder_id = create_reminder(user_id, text, remind_at)
    schedule_reminder(context.application, user_id, text, remind_at)
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    return ConversationHandler.END

async def delete_reminder_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    reminder_id = int(query.data.split("_")[1])
    delete_reminder(reminder_id)
    await show_reminders(update, context)

# ==== –ê–¥–º–∏–Ω–∫–∞ ====

async def show_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    users = get_users()
    admins = get_admins()
    text = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\nüëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω–æ–≤: {admins}"
    await query.edit_message_text(text)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ====

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

def create_application_without_notes():
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(CallbackQueryHandler(show_lists, pattern="^lists$"))
    application.add_handler(CallbackQueryHandler(show_reminders, pattern="^reminders$"))
    application.add_handler(CallbackQueryHandler(show_admin, pattern="^admin$"))
    application.add_handler(CallbackQueryHandler(start, pattern="^back$"))

    # –°–ø–∏—Å–∫–∏
    list_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(new_list, pattern="^new_list$")],
        states={
            LIST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_list_name)],
            LIST_ITEM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_list_item),
                CommandHandler("done", done_adding)
            ],
        },
        fallbacks=[MessageHandler(filters.COMMAND, fallback)],
    )
    application.add_handler(list_conv)

    application.add_handler(CallbackQueryHandler(open_list, pattern="^list_"))
    application.add_handler(CallbackQueryHandler(delete_item, pattern="^delitem_"))
    application.add_handler(CallbackQueryHandler(delete_list_handler, pattern="^dellist_"))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(new_reminder, pattern="^new_reminder$")],
        states={
            REMINDER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminder_text)],
            REMINDER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminder_time)],
        },
        fallbacks=[MessageHandler(filters.COMMAND, fallback)],
    )
    application.add_handler(reminder_conv)
    application.add_handler(CallbackQueryHandler(delete_reminder_handler, pattern="^delrem_"))

    return application
