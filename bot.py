import logging
import os
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
from database import (
    init_db,
    add_note,
    get_notes,
    delete_note,
    add_shopping_item,
    get_shopping_items,
    delete_shopping_item,
    clear_shopping_items,
    add_reminder,
    get_reminders,
    delete_reminder,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

# ==== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫, —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("/start", callback_data="/start"), InlineKeyboardButton("/help", callback_data="/help")],
        [InlineKeyboardButton("/addnote", callback_data="/addnote"), InlineKeyboardButton("/listnotes", callback_data="/listnotes"),
         InlineKeyboardButton("/deletenote", callback_data="/deletenote")],
        [InlineKeyboardButton("/additem", callback_data="/additem"), InlineKeyboardButton("/listitems", callback_data="/listitems"),
         InlineKeyboardButton("/deleteitem", callback_data="/deleteitem")],
        [InlineKeyboardButton("/clearitems", callback_data="/clearitems"), InlineKeyboardButton("/setreminder", callback_data="/setreminder")],
        [InlineKeyboardButton("/listreminders", callback_data="/listreminders"), InlineKeyboardButton("/deletereminder", callback_data="/deletereminder")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/addnote <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/listnotes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "/deletenote <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/additem <—ç–ª–µ–º–µ–Ω—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "/listitems ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "/deleteitem <id> ‚Äî —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "/clearitems ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
        "/setreminder <YYYY-MM-DD HH:MM> <—Ç–µ–∫—Å—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/listreminders ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/deletereminder <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=reply_markup,
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    command = query.data
    await query.answer()
    await query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ: {command}")
    await query.message.delete()

# ==== –§–£–ù–ö–¶–ò–ò –ó–ê–ú–ï–¢–û–ö ====
async def add_note_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: /addnote <—Ç–µ–∫—Å—Ç>")
        return
    text = " ".join(context.args)
    user_id = update.effective_user.id
    add_note(user_id, text)
    await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def list_notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    notes = get_notes(user_id)
    if not notes:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    response = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n"
    for note in notes:
        response += f"ID: {note[0]} | {note[2]}\n"
    await update.message.reply_text(response)

async def delete_note_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏: /deletenote <id>")
        return
    note_id = int(context.args[0])
    user_id = update.effective_user.id
    if delete_note(user_id, note_id):
        await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# ==== –§–£–ù–ö–¶–ò–ò –°–ü–ò–°–ö–ê –ü–û–ö–£–ü–û–ö ====
async def add_shopping_item_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç: /additem <—ç–ª–µ–º–µ–Ω—Ç>")
        return
    item = " ".join(context.args)
    user_id = update.effective_user.id
    add_shopping_item(user_id, item)
    await update.message.reply_text("–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!")

async def list_shopping_items_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    items = get_shopping_items(user_id)
    if not items:
        await update.message.reply_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
        return
    response = "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n"
    for item in items:
        response += f"ID: {item[0]} | {item[2]}\n"
    await update.message.reply_text(response)

async def delete_shopping_item_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —ç–ª–µ–º–µ–Ω—Ç–∞: /deleteitem <id>")
        return
    item_id = int(context.args[0])
    user_id = update.effective_user.id
    if delete_shopping_item(user_id, item_id):
        await update.message.reply_text("–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫!")
    else:
        await update.message.reply_text("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def clear_shopping_items_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    clear_shopping_items(user_id)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω!")

# ==== –§–£–ù–ö–¶–ò–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ====
async def set_reminder_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setreminder YYYY-MM-DD HH:MM <—Ç–µ–∫—Å—Ç>")
        return
    try:
        datetime_str = f"{context.args[0]} {context.args[1]}"
        reminder_time = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
        text = " ".join(context.args[2:])
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        reminder_id = add_reminder(user_id, text, reminder_time)
        scheduler.add_job(
            send_reminder,
            trigger=DateTrigger(run_date=reminder_time),
            args=[context.bot, chat_id, text, reminder_id]
        )
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {datetime_str}!")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")

async def send_reminder(bot, chat_id: int, text: str, reminder_id: int) -> None:
    await bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    delete_reminder(reminder_id)

async def list_reminders_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    reminders = get_reminders(user_id)
    if not reminders:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    response = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for r in reminders:
        response += f"ID: {r[0]} | {r[2]} –≤ {r[3]}\n"
    await update.message.reply_text(response)

async def delete_reminder_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: /deletereminder <id>")
        return
    reminder_id = int(context.args[0])
    if delete_reminder(reminder_id):
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ï–ë–•–£–ö–ê ====
async def process_update(update: dict, application: Application):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    update_obj = Update.de_json(data=update, bot=application.bot)
    await application.process_update(update_obj)

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====
def create_application():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("addnote", add_note_command))
    application.add_handler(CommandHandler("listnotes", list_notes_command))
    application.add_handler(CommandHandler("deletenote", delete_note_command))
    application.add_handler(CommandHandler("additem", add_shopping_item_command))
    application.add_handler(CommandHandler("listitems", list_shopping_items_command))
    application.add_handler(CommandHandler("deleteitem", delete_shopping_item_command))
    application.add_handler(CommandHandler("clearitems", clear_shopping_items_command))
    application.add_handler(CommandHandler("setreminder", set_reminder_command))
    application.add_handler(CommandHandler("listreminders", list_reminders_command))
    application.add_handler(CommandHandler("deletereminder", delete_reminder_command))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()

    return application