import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, CallbackQueryHandler, filters
)
from database import init_db, add_note

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_NOTE_TEXT = 1

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def create_application():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN is not set")

    init_db()
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))

    # FSM-–¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    note_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É$"), start_note)],
        states={
            ASK_NOTE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_note)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(note_conv)

    return app

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"),
        KeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    ]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∑–∞–º–µ—Ç–∫–∏
async def start_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    return ASK_NOTE_TEXT

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    note_text = update.message.text.strip()
    add_note(user_id, note_text)
    await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {note_text}")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ app.py
async def process_update(update_data, application):
    update = Update.de_json(update_data, application.bot)
    await application.process_update(update)
