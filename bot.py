import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import (
    init_db, add_note, add_shopping_item, add_reminder,
    is_admin, get_all_users, get_all_lists
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
ASK_NOTE_TEXT = 1
ASK_LIST_NAME, ASK_DELIMITER, ASK_ITEMS = range(2, 5)
ASK_DATETIME, ASK_REMINDER_TEXT = range(5, 7)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_data_store = {}

async def create_application():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN is not set")

    init_db()
    app = Application.builder().token(token).build()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è JobQueue
    scheduler = AsyncIOScheduler()
    app.job_queue.scheduler = scheduler
    scheduler.start()

    # –û–±—â–∏–π —Å—Ç–∞—Ä—Ç
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(CommandHandler("users", list_users))
    app.add_handler(CommandHandler("lists", list_all_lists))
    app.add_handler(MessageHandler(filters.Regex("^üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$"), list_users))
    app.add_handler(MessageHandler(filters.Regex("^üìÇ –°–ø–∏—Å–∫–∏$"), list_all_lists))

    # FSM –ó–∞–º–µ—Ç–∫–∏
    note_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É$"), start_note)],
        states={
            ASK_NOTE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_note)]
        },
        fallbacks=[],
    )

    # FSM –ü–æ–∫—É–ø–∫–∏
    shopping_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üõí –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç$"), start_shopping)],
        states={
            ASK_LIST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_delimiter)],
            ASK_DELIMITER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_items)],
            ASK_ITEMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_items)],
        },
        fallbacks=[],
    )

    # FSM –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), start_reminder)],
        states={
            ASK_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_reminder_text)],
            ASK_REMINDER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reminder)],
        },
        fallbacks=[],
    )

    app.add_handler(note_conv)
    app.add_handler(shopping_conv)
    app.add_handler(reminder_conv)

    return app

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [[
        KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        KeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"),
        KeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    ]]
    if is_admin(user_id):
        keyboard.append([KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton("üìÇ –°–ø–∏—Å–∫–∏")])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/lists ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    users = get_all_users()
    text = "üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"ID {u[0]}" for u in users)
    await update.message.reply_text(text)

async def list_all_lists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    lists = get_all_lists()
    text = "üì¶ –í—Å–µ —Å–ø–∏—Å–∫–∏:\n" + "\n".join(f"{r[0]} (–≤–ª–∞–¥–µ–ª–µ—Ü {r[1]})" for r in lists)
    await update.message.reply_text(text)

# -------------------------- –ó–∞–º–µ—Ç–∫–∏ --------------------------
async def start_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    return ASK_NOTE_TEXT

async def save_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    add_note(user_id, text)
    await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {text}")
    return ConversationHandler.END

# -------------------------- –ü–æ–∫—É–ø–∫–∏ --------------------------
async def start_shopping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫:")
    return ASK_LIST_NAME

async def ask_delimiter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data_store[user_id] = {"list_name": update.message.text.strip()}
    keyboard = [["–ó–∞–ø—è—Ç–∞—è"], ["–ü—Ä–æ–±–µ–ª"], ["–° –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"]]
    await update.message.reply_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_DELIMITER

async def ask_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    delimiter = update.message.text.strip().lower()
    user_data_store[user_id]["delimiter"] = delimiter
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
    return ASK_ITEMS

async def save_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    raw = update.message.text.strip()
    data = user_data_store.get(user_id, {})
    delimiter = data.get("delimiter")

    if delimiter == "–∑–∞–ø—è—Ç–∞—è":
        items = [x.strip() for x in raw.split(",") if x.strip()]
    elif delimiter == "–ø—Ä–æ–±–µ–ª":
        items = [x.strip() for x in raw.split(" ") if x.strip()]
    elif delimiter == "—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏":
        items = [x.strip() for x in raw.split("\n") if x.strip()]
    else:
        items = [raw.strip()]

    for item in items:
        add_shopping_item(user_id, f"{data.get('list_name')}: {item}")

    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ '{data.get('list_name')}'")
    user_data_store.pop(user_id, None)
    return ConversationHandler.END

# -------------------------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è --------------------------
async def start_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    return ASK_DATETIME

async def ask_reminder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        reminder_time = datetime.strptime(update.message.text.strip(), "%Y-%m-%d %H:%M")
        user_data_store[user_id] = {"reminder_time": reminder_time}
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return ASK_REMINDER_TEXT
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return ASK_DATETIME

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(chat_id=job.data["chat_id"], text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data['text']}")

async def save_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    reminder_time = user_data_store.get(user_id, {}).get("reminder_time")
    if reminder_time:
        add_reminder(user_id, text, reminder_time)
        context.job_queue.run_once(
            callback=send_reminder,
            when=reminder_time,
            data={"chat_id": update.effective_chat.id, "text": text}
        )
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%Y-%m-%d %H:%M')}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è")
    user_data_store.pop(user_id, None)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ app.py
async def process_update(update_data, application):
    update = Update.de_json(update_data, application.bot)
    await application.process_update(update)
