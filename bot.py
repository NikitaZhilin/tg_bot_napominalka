import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ConversationHandler, ContextTypes
)
from database import (
    create_list, add_item_to_list, get_lists, get_items_from_list,
    delete_list, delete_item_from_list,
    create_reminder, get_reminders, delete_reminder, get_users, get_admins
)
from scheduler import schedule_reminder
from datetime import datetime
from enum import Enum, auto

class ReminderStates(Enum):
    TEXT = auto()
    YEAR = auto()
    MONTH = auto()
    DAY = auto()
    HOUR = auto()
    MINUTE = auto()

REMINDER_TEXT = ReminderStates.TEXT
REMINDER_YEAR = ReminderStates.YEAR
REMINDER_MONTH = ReminderStates.MONTH
REMINDER_DAY = ReminderStates.DAY
REMINDER_HOUR = ReminderStates.HOUR
REMINDER_MINUTE = ReminderStates.MINUTE

ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")


def is_admin(user_id):
    return str(user_id) in ADMIN_IDS


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üè° –°–ø–∏—Å–∫–∏", callback_data="lists")],
        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")],
        [InlineKeyboardButton("üö∞ –ê–¥–º–∏–Ω–∫–∞", callback_data="admin")],
    ]
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))


# ==== –°–ø–∏—Å–∫–∏ ====

async def show_lists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lists = get_lists(user_id)
    keyboard = [
        [InlineKeyboardButton(lst["name"], callback_data=f"list_{lst['id']}")]
        for lst in lists
    ]
    keyboard.append([InlineKeyboardButton("üì¶ –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="new_list")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await query.edit_message_text("–í–∞—à–∏ —Å–ø–∏—Å–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))


# ==== –ê–¥–º–∏–Ω–∫–∞ ====

async def show_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]))
        return
    users = get_users()
    admins = get_admins()
    text = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\nüëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω–æ–≤: {admins}"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


# ==== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ====

async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    reminders = get_reminders(user_id)
    keyboard = [[InlineKeyboardButton(f"‚ùå {rem['text']}", callback_data=f"delrem_{rem['id']}")] for rem in reminders]
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="new_reminder")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    await query.edit_message_text("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))


# ==== –°–æ–∑–¥–∞–Ω–∏–µ application ====

application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(show_lists, pattern="^lists$"))
application.add_handler(CallbackQueryHandler(show_admin, pattern="^admin$"))
application.add_handler(CallbackQueryHandler(show_reminders, pattern="^reminders$"))
application.add_handler(CallbackQueryHandler(start, pattern="^back$"))

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å ConversationHandler'—ã –∏ –ø—Ä–æ—á–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã

__all__ = ["application"]
