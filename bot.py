import logging
import os
import sqlite3
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

# ==== –§–£–ù–ö–¶–ò–ò –ú–ò–ì–†–ê–¶–ò–ò ====
def migrate_sqlite_to_postgres():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL."""
    if not os.path.exists("bot.db"):
        logger.info("–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é.")
        return

    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ SQLite –≤ PostgreSQL...")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
        sqlite_conn = sqlite3.connect("bot.db")
        sqlite_cur = sqlite_conn.cursor()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        pg_conn = psycopg2.connect(
            host=os.getenv("DB_HOST"),
            database=os.getenv("DB_NAME"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            port=os.getenv("DB_PORT", 5432)
        )
        pg_cur = pg_conn.cursor()

        # –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫
        sqlite_cur.execute("SELECT user_id, text FROM notes")
        for row in sqlite_cur.fetchall():
            pg_cur.execute("INSERT INTO notes (user_id, text) VALUES (%s, %s)", row)

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
        sqlite_cur.execute("SELECT user_id, item FROM shopping_items")
        for row in sqlite_cur.fetchall():
            pg_cur.execute("INSERT INTO shopping_items (user_id, item) VALUES (%s, %s)", row)

        # –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        sqlite_cur.execute("SELECT user_id, text, reminder_time FROM reminders")
        for row in sqlite_cur.fetchall():
            pg_cur.execute("INSERT INTO reminders (user_id, text, reminder_time) VALUES (%s, %s, %s)", row)

        pg_conn.commit()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        os.remove("bot.db")
        logger.info("üóë –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    finally:
        sqlite_cur.close()
        sqlite_conn.close()
        pg_cur.close()
        pg_conn.close()


# ==== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
from database import (
    init_db,
    add_note,
    get_notes,
    delete_note,
    add_shopping_item,
    get_shopping_items,
    delete_shopping_item,
    clear_shopping_items,
    add_reminder,
    get_reminders,
    delete_reminder,
)

# ==== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ====
# –ó–¥–µ—Å—å –≤—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
# start, help_command, button_callback –∏ —Ç.–¥.
# –í—Å—Ç–∞–≤—å—Ç–µ –∏—Ö —Å—é–¥–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot.py


# ==== MAIN FUNCTION ====
async def post_init(app: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏...")
    if os.path.exists("bot.db"):
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ SQLite. –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        await asyncio.get_event_loop().run_in_executor(None, migrate_sqlite_to_postgres)
    else:
        logger.info("–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ SQLite –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    init_db()
    scheduler.start()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    application = Application.builder().token(token).post_init(post_init).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("addnote", add_note_command))
    application.add_handler(CommandHandler("listnotes", list_notes_command))
    application.add_handler(CommandHandler("deletenote", delete_note_command))
    application.add_handler(CommandHandler("additem", add_shopping_item_command))
    application.add_handler(CommandHandler("listitems", list_shopping_items_command))
    application.add_handler(CommandHandler("deleteitem", delete_shopping_item_command))
    application.add_handler(CommandHandler("clearitems", clear_shopping_items_command))
    application.add_handler(CommandHandler("setreminder", set_reminder_command))
    application.add_handler(CommandHandler("listreminders", list_reminders_command))
    application.add_handler(CommandHandler("deletereminder", delete_reminder_command))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)